#(¬©)CodeXBotz




import os
import asyncio
from pyrogram import Client, filters, __version__
from pyrogram.enums import ParseMode
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from pyrogram.errors import FloodWait, UserIsBlocked, InputUserDeactivated

from utils import verify_user, check_token

from bot import Bot
from config import ADMINS, FORCE_MSG, START_MSG, CUSTOM_CAPTION, DISABLE_CHANNEL_BUTTON, PROTECT_CONTENT
from helper_func import subscribed, encode, decode, get_messages
from database.database import add_user, del_user, full_userbase, present_user

@Bot.on_message(filters.private & filters.command(["start"]))
async def start(bot, update):
    message=update
    reply_markup = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("üòä About Me", callback_data = "about"),
                    InlineKeyboardButton("üîí Close", callback_data = "close")
                ]
            ]
        )
    
    if len(update.command) != 2:
      
        await bot.send_message(
            chat_id=update.chat.id,
            text=START_MSG.format(
                first = message.from_user.first_name,
                last = message.from_user.last_name,
                username = None if not message.from_user.username else '@' + message.from_user.username,
                mention = message.from_user.mention,
                id = message.from_user.id
            ),
            reply_markup=reply_markup,
            reply_to_message_id=update.id
        )
        return
    data = update.command[1]

    if data.split("-", 1)[0] == "verify":
        userid = data.split("-", 2)[1]
        token = data.split("-", 3)[2]
        if str(update.from_user.id) != str(userid):
            return await update.reply_text(
                text="<b>·¥áx·¥ò…™ Ä·¥á·¥Ö  ü…™…¥·¥ã ·¥è Ä …™…¥·¥†·¥Ä ü…™·¥Ö  ü…™…¥·¥ã !</b>",
                protect_content=True
            )
        is_valid = await check_token(bot, userid, token)
        if is_valid == True:
            await update.reply_text(
                text=f"<b> ú·¥á ü ü·¥è {update.from_user.mention} üëã,\n è·¥è·¥ú ·¥Ä Ä·¥á s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥†·¥á Ä…™“ì…™·¥á·¥Ö !\n\n…¥·¥è·¥°  è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥áss “ì·¥è Ä ·¥Ä ü ü ·¥ú Ä ü ·¥ú·¥ò ü·¥è·¥Ä·¥Ö…™…¥…¢ ·¥õ…™ ü ü ·¥õ·¥è·¥Ö·¥Ä è ·¥ç…™·¥Ö…¥…™…¢ ú·¥õ.</b>",
                protect_content=True
            )
            await verify_user(bot, userid, token)
        else:
            return await update.reply_text(
                text="<b>·¥áx·¥ò…™ Ä·¥á·¥Ö  ü…™…¥·¥ã ·¥è Ä …™…¥·¥†·¥Ä ü…™·¥Ö  ü…™…¥·¥ã !</b>",
                protect_content=True
            ) 
@Bot.on_message(filters.private & ~filters.via_bot & filters.regex(pattern=".*http.*"))
async def echo(bot, update):
    if not await check_verification(bot, update.from_user.id) and Config.TECH_VJ == True:
        btn = [[
            InlineKeyboardButton("üë®‚Äçüíª ·¥†·¥á Ä…™“ì è", url=await get_token(bot, update.from_user.id, f"https://telegram.me/{Config.TECH_VJ_BOT_USERNAME}?start="))
            ],[
            InlineKeyboardButton("üîª  ú·¥è·¥° ·¥õ·¥è ·¥è·¥ò·¥á…¥  ü…™…¥·¥ã ·¥Ä…¥·¥Ö ·¥†·¥á Ä…™“ì è üî∫", url=f"{Config.TECH_VJ_TUTORIAL}")
        ]]
        await update.reply_text(
            text="<b>·¥Ö·¥ú·¥á ·¥õ·¥è ·¥è·¥†·¥á Ä ü·¥è·¥Ä·¥Ö ·¥è…¥  ô·¥è·¥õ  è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥†·¥á Ä…™“ì è “ì…™ Äs·¥õ\n·¥ã…™…¥·¥Ö ü è ·¥†·¥á Ä…™“ì è “ì…™ Äs·¥õ\n\n…™“ì  è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ ·¥ã…¥·¥è·¥°  ú·¥è·¥° ·¥õ·¥è ·¥†·¥á Ä…™“ì è ·¥õ ú·¥á…¥ ·¥õ·¥Ä·¥ò ·¥è…¥  ú·¥è·¥° ·¥õ·¥è ·¥è·¥ò·¥á…¥  ü…™…¥·¥ã  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ ú·¥á…¥ s·¥á·¥á 60 s·¥á·¥Ñ·¥è…¥·¥Ö ·¥†…™·¥Ö·¥á·¥è ·¥õ ú·¥á…¥ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥†·¥á Ä…™“ì è  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥Ä…¥·¥Ö ·¥†·¥á Ä…™“ì—É</b>",
            protect_content=True,
            reply_markup=InlineKeyboardMarkup(btn)
        )

# Run verification system on startup

#===m========================================================================##

WAIT_MSG = """"<b>Processing ...</b>"""

REPLY_ERROR = """<code>Use this command as a replay to any telegram message with out any spaces.</code>"""

#=====================================================================================##

    
    
@Bot.on_message(filters.command('start') & filters.private)
async def not_joined(client: Client, message: Message):
    buttons = [
        [
            InlineKeyboardButton(
                "Join Channel",
                url = client.invitelink)
        ]
    ]
    try:
        buttons.append(
            [
                InlineKeyboardButton(
                    text = 'Try Again',
                    url = f"https://t.me/{client.username}?start={message.command[1]}"
                )
            ]
        )
    except IndexError:
        pass

    await message.reply(
        text = FORCE_MSG.format(
                first = message.from_user.first_name,
                last = message.from_user.last_name,
                username = None if not message.from_user.username else '@' + message.from_user.username,
                mention = message.from_user.mention,
                id = message.from_user.id
            ),
        reply_markup = InlineKeyboardMarkup(buttons),
        quote = True,
        disable_web_page_preview = True
    )

@Bot.on_message(filters.command('users') & filters.private & filters.user(ADMINS))
async def get_users(client: Bot, message: Message):
    msg = await client.send_message(chat_id=message.chat.id, text=WAIT_MSG)
    users = await full_userbase()
    await msg.edit(f"{len(users)} users are using this bot")

@Bot.on_message(filters.private & filters.command('broadcast') & filters.user(ADMINS))
async def send_text(client: Bot, message: Message):
    if message.reply_to_message:
        query = await full_userbase()
        broadcast_msg = message.reply_to_message
        total = 0
        successful = 0
        blocked = 0
        deleted = 0
        unsuccessful = 0
        
        pls_wait = await message.reply("<i>Broadcasting Message.. This will Take Some Time</i>")
        for chat_id in query:
            try:
                await broadcast_msg.copy(chat_id)
                successful += 1
            except FloodWait as e:
                await asyncio.sleep(e.x)
                await broadcast_msg.copy(chat_id)
                successful += 1
            except UserIsBlocked:
                await del_user(chat_id)
                blocked += 1
            except InputUserDeactivated:
                await del_user(chat_id)
                deleted += 1
            except:
                unsuccessful += 1
                pass
            total += 1
        
        status = f"""<b><u>Broadcast Completed</u>

Total Users: <code>{total}</code>
Successful: <code>{successful}</code>
Blocked Users: <code>{blocked}</code>
Deleted Accounts: <code>{deleted}</code>
Unsuccessful: <code>{unsuccessful}</code></b>"""
        
        return await pls_wait.edit(status)

    else:
        msg = await message.reply(REPLY_ERROR)
        await asyncio.sleep(8)
        await msg.delete()
